export default function Editor({
  $target,
  initialState = {
    title: "",
    content: "",
  },
  onEditing,
}) {
  const $editor = document.createElement("div");
  $editor.innerHTML = `
    <input type="text" name="title" style="width:400px" />
    <div name="content" contentEditable style="width:300px; height:200px; border:1px solid blue; padding:8px"></div>
  `;

  $target.appendChild($editor);

  this.state = initialState;

  this.setState = (nextState) => {
    this.state = nextState;
    this.render();
  };

  this.render = () => {
    // 매번 $editor.innerHTML로 그리고 각각 한줄마다 ## 등 검사하는게 아니라 검사하고 그려보도록 하자

    const richContent = this.state.content
      .split("\n")
      .map((line) => {
        if (line.indexOf("# ") === 0) {
          return `<h1>${line.substring(2)}</h1>`;
        } else if (line.indexOf("## ") === 0) {
          return `<h2>${line.substring(3)}</h2>`;
        } else if (line.indexOf("### ") === 0) {
          return `<h3>${line.substring(4)}</h3>`;
        } else {
          return line;
        }
      })
      .join("<br/>");

    $editor.querySelector("[name=title]").value = this.state.title;
    $editor.querySelector("[name=content]").innerHTML = richContent;
  };

  this.render();

  // div contenteditable에선 value값이 아니라 InnerHTML이니까 각각 하자
  $editor.querySelector("[name=title]").addEventListener("keyup", (e) => {
    const name = e.target.getAttribute("name");

    const nextState = {
      ...this.state,
      title: e.target.value,
    };

    this.setState(nextState);
    onEditing(nextState); // ???? this.state 인데 강사님은 ? ?? ? ?? 왜 ? ?
  });

  $editor.querySelector('[name="content"]').addEventListener("input", (e) => {
    const nextState = {
      ...this.state,
      content: e.target.innerHTML,
    };
    this.setState(nextState);
    // 노션처럼 ## 인식하게 쓰고 싶으면? 한줄단위로 바꿔주는 코드가 필요
  });
}
